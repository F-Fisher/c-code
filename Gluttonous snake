#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<Windows.h>
#include<graphics.h>
#include<mmstream.h>
#pragma comment(lib,"winmm.lib") //多媒体设备节后
#define SNAKE_NUM 500
enum DIR//表示蛇的方向
{
	UP,
	DOWN,
	LEFT,
	RIGHT,
};
//蛇属性 节 方向 速度  坐标
//蛇结构体
struct Snake
{
	int size;//节数
	int dir;//方向
	int speed;//速度
	POINT coor[SNAKE_NUM];//坐标LONG x,LONG y最大节数
}snake;
//食物结构
struct food
{
	int x;
	int y;
	int r;
	bool flag;   //是否被吃
	DWORD color;//颜色

}food;
//数据初始化
void GameInit()
{
	//播放背景音乐
	mciSendString("open aa.mp3 alias BGM",0,0,0);
	mciSendString("play BGM repeat", 0, 0, 0);
	//init初始化graph图形窗口
	initgraph(640, 480);
	srand(GetTickCount());//获取系统从开始到现在所经过的毫秒数作为种子
	//一开始有三节
	snake.size = 3;
	snake.speed = 10;
	snake.dir = RIGHT;
	for (int i = 0; i < snake.size; i++)
	{
		snake.coor[i].x = 40 - 10 * i;
		snake.coor[i].y = 10;
	}
	//初始化食物
	//设置随机数种子，把时间设为种子
	food.x = rand() % 630;
	food.y = rand() % 470;
	food.color = RGB(rand()%256,rand()%256,rand()%256);
	food.r = rand() % 10 + 5;
	food.flag = true;
	
}
//绘画
void eatFood()
{
	if (food.flag&&snake.coor[0].x>=food.x-food.r&&snake.coor[0].x<=food.x+food.r&&snake.coor[0].y>=food.y-food.r&&snake.coor[0].y<=food.y+food.r)
	{
		food.flag = false;
		snake.size++;
	}
	if (!food.flag)//食物消失，重新消失
	{
		food.x = rand() % 600;
		food.y = rand() % 440;
		food.color = RGB(rand() % 256, rand() % 256, rand() % 256);
		food.r = rand() % 10 + 5;
		food.flag = true;
	}
}
//游戏暂停
void stop()
{
	//空格暂停
	if (_kbhit())
	{
		if (_getch() == ' ')
		{
			while (1)
			{
				if (_getch() == ' ')
				{
					break;
				}
			}
		}
	}
}
void GameDraw()
{
	//双缓冲绘图
	BeginBatchDraw();
	//设置背景颜色
	setbkcolor(RGB(255, 192, 203));//设置颜色
	cleardevice();//清空绘图设备
	//绘制蛇
	setfillcolor(BLUE);
	for (int i = 0; i < snake.size; i++)
	{
		solidcircle(snake.coor[i].x, snake.coor[i].y, 5);
	}
	//绘制食物
	if (food.flag)
	{
		solidcircle(food.x, food.y, food.r);
	}
	/*char b[] = "通信2102 周鑫源";
	outtextxy(500, 0, b);*/
	EndBatchDraw();
}
//移动蛇
void snakeMove()
{
	//移动是坐标改变
	for (int i = snake.size-1; i > 0; i--)
	{
		snake.coor[i] = snake.coor[i - 1];
	}
	switch (snake.dir)
	{
	case UP:
		snake.coor[0].y-=snake.speed;
		if (snake.coor[0].y-5 <= 0)
		{
			snake.coor[0].y = 475;
		}
		break;
	case DOWN:
		snake.coor[0].y+=snake.speed;
		if (snake.coor[0].y + 5 >= 480)
		{
			snake.coor[0].y = 5;
		}
		break;
	case LEFT:
		snake.coor[0].x-=snake.speed;
		if (snake.coor[0].x - 5 <= 0)
		{
			snake.coor[0].x = 635;
		}
		break;
	case RIGHT:
		snake.coor[0].x+=snake.speed;
		if (snake.coor[0].x +5 >= 640)
		{
			snake.coor[0].x = 5;
		}
		break;
	default:
		break;
	}
	eatFood();
}
void ifDie()
{
	int i = snake.size;
	for (i; i > 1; i--)
	{
		if (snake.coor[0].x < snake.coor[i].x + 5 && snake.coor[0].x>snake.coor[i].x - 5 && snake.coor[0].y < snake.coor[i].y + 5 && snake.coor[0].y>snake.coor[i].y - 5)
		{
			char ch[] = "失败 请按 空格 继续游戏";
			outtextxy(300, 200, ch);
			while (1)
			{
				if (_getch() == ' ')
				{
					GameInit();
					break;
				}
			}
		}
	}
}
//通过按键改变运动方向
void keyControl()
{
	//72 80 75 77
	if (_kbhit())//判断是否按键，如果有返回真
	{

		switch (_getch())//
		{
		case'w':
		case'W':
		case'72':
			if (snake.dir != DOWN)
			{
				snake.dir = UP;
			}
			break;
		case's':
		case'S':
		case'80':
			if (snake.dir != UP)
			{
				snake.dir = DOWN;
			}
			break;
		case'a':
		case'A':
		case'75':
			if (snake.dir != RIGHT)
			{
				snake.dir = LEFT;
			}
			break;
		case'd':
		case'D':
		case'77':
			if (snake.dir != LEFT)
			{
				snake.dir = RIGHT;
			}
			break;
		case ' ':
			while (1)
			{
				if (_getch() == ' ')
				{
					return;
				}
			}
			break;
		}
	}
}
int main()
{
	GameInit();
	while (1)
	{
		GameDraw();
		snakeMove();
		keyControl();
		ifDie();
		Sleep(100);
	}
	return 0;
}
